# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      # context: defines either a path to a directory containing a Dockerfile, default (.)
      context: .
      # target: defines the stage to build as defined inside a multi-stage Dockerfile
      target: final
      # dockerfile: sets an alternate Dockerfile
      # dockerfile: Dockerfile
    ports:
      - 7160:7160 # Map HTTPS port
      - 5091:5091 # Map HTTP port
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      # configured in Program.cs
      # - ASPNETCORE_URLS=https://+:7160;http://+:5091
      # - ASPNETCORE_Kestrel__Certificates__Default__Password=yourpassword
      # - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/localhost.pfx
    volumes:
      - ./https:/https # Mount the certificate
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
    depends_on:
      mysql:
        condition: service_healthy
    # networks:
    #   - fridge-network
    extra_hosts:
      - "host.docker.internal:host-gateway"  # Set host.docker.internal to host-gateway

  mysql:
    image: mysql:8.0
    restart: always  # Restart if it crashes
    environment:
      - MYSQL_DATABASE=fridge
      - MYSQL_ROOT_PASSWORD=pass
    ports:
       # Default MYSQL port 3306
      - 3307:3306
    volumes:
      - fridge-data:/var/lib/mysql
    # expose:
    #   - 3306
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
    # networks:
    #   - fridge-network

  migrator:
    # reuse a prebuilt SDK image in Dockerfile
    # image: mcr.microsoft.com/dotnet/sdk:8.0
    build:
      context: .
      target: build
    environment:
      - ASPNETCORE_ENVIRONMENT=Production # for migration using ConnectionStrings in appettings.Production.json
    # volumes:
    #   - ./Data:/app/Data
    depends_on:
      mysql:
        condition: service_healthy
    command: /bin/sh -c "dotnet tool restore && dotnet ef database update --project /source/FridgeBE.Api/FridgeBE.Api.csproj"
    # networks:
    #   - fridge-network
    
volumes:
  fridge-data:

# networks:
#   fridge-network:
#     driver: bridge
